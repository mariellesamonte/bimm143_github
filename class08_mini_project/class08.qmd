---
title: "Class 8: Breast cancer mini project"
author: "Marielle Samonte (A16861951)"
format: pdf
toc: true
---

## Background
The goal of this mini-project is for you to explore a complete analysis using the unsupervised learning techniques covered in class. You’ll extend what you’ve learned by combining PCA as a preprocessing step to clustering using data that consist of measurements of cell nuclei of human breast masses. This expands on our RNA-Seq analysis from last day.

## Data import

Our data come from the U. of Wisconsin Medical Center

```{r}
wisc.df <- read.csv("WisconsinCancer .csv",row.names=1)
```

> Q1. How many observations are in this dataset?

```{r}
nrow(wisc.df)
```

> Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```

```{r}
sum(wisc.df$diagnosis == "M")
```


> Q3. How many variables/features in the data are suffixed with _mean?

```{r}
colnames(wisc.df)
```

```{r}
length(grep("mean", colnames(wisc.df), value = T))
```
10 variables are suffixed with _mean.

There is a diagnosis column that is the clinician consensus that I want to exclude from any further analysis. We will come back later and compare our results to this diagnosis. 

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
head(diagnosis)
```

Now we can remove it from the `wisc.df`

```{r}
wisc.data <- wisc.df[,-1]
```

## Clustering

Let's try a `hclust()`
```{r}
hc <- hclust(dist(wisc.data))
plot(hc)
```

We can extract clusters from this rather poor dendrogram/tree with the `cutree()`

```{r}
grps <- cutree(hc, k=2)
```

How many individuals in each cluster?

```{r}
table(grps)
```

```{r}
table(diagnosis)
```

We can generate a cross-table that compares our cluster `grps` vector with our `diagnosis` vector values. 

```{r}
table(diagnosis, grps)
```

## Principal Component Analysis

## The importance of data scaling

The main function for PCA in base R is `prcomp()` it has a default input parameter of `scale=FALSE`

```{r}
#prcomp()
head(mtcars)
```

We could do a PCA of this data as is and it could be mis-leading...

```{r}
pc <- prcomp(mtcars)
biplot(pc)
```

Let's look at the mean values of each column and their standard deviation.

```{r}
colMeans(mtcars)
```

```{r}
apply(mtcars, 2, sd)
```

We can "scale" this data before PCA to get a much better representation and analysis of all the columns. 
```{r}
mtscale <- scale(mtcars)
```

```{r}
round(colMeans(mtscale))
```

```{r}
apply(mtscale, 2, sd)
```

```{r}
pc.scale <- prcomp(mtscale)
```

We can look at the two main results figures from PCA - the "PC plot" (aka score plot, ordination plot, or PC1 vs PC2 plot). The "loadings plot" how the original variables contribute to the new PCs.

A loadings plot of the unscalled PCA results 
```{r}
library(ggplot2)

ggplot(pc$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```

Loadings plot of the scalled data. 
```{r}
ggplot(pc.scale$rotation) +
  aes(PC1, rownames(pc$rotation)) +
  geom_col()
```

PC plot of scalled PCA results
```{r}
library(ggrepel)

ggplot(pc.scale$x) +
  aes(PC1, PC2, label=rownames(pc.scale$x)) +
  geom_point() +
  geom_text_repel()
```

> **Key point**: In general we will set `scale=TRUE` when we do PCA. This is not the default but probably should be...

We can check the SD and mean of the different columns in `wisc.data` to see if we need to scale - hint: we do!

### PCA of wisc.data

```{r}
wisc.pr <- prcomp(wisc.data, scale=TRUE)
```

To see how well PCA is doing here in terms capturing the variance (or spread) in the data we can use the `summary()` function.

```{r}
summary(wisc.pr)
```
> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

44.27% is captured by the first principal components (PC1). 

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3 PCs are required to describe at least 70% of the original variance in the data.

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 PCs are required to describe at least 90% of the original variance in the data.


A common visualization for PCA results is the so-called biplot.

```{r}
biplot(wisc.pr)
```

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

The plot is too messy and difficult to understand because there is too much overlapping and the relationship between PC1 and PC2 is unclear.


Scatter plots can be generated to capture a clearer separation of malignant (red) from benign (black) samples. 

```{r}
# Scatter plot observations by components 1 and 2
plot( wisc.pr$x[,1:2] , col = diagnosis , 
     xlab = "PC1", ylab = "PC2")
```

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
# Repeat for components 1 and 3
plot( wisc.pr$x[,c(1,3)] , col = diagnosis , 
     xlab = "PC1", ylab = "PC3")
```
The plot for PC1 vs PC2 shows better separation between benign and malignant samples than PC1 vs PC3 which has more overlap.


Let's make the main PC1 vs PC2

```{r}
ggplot(wisc.pr$x) +
  aes(PC1, PC2, col=diagnosis) +
  geom_point() +
  xlab("PC1 (44.3%)") +
  ylab("PC2 (19%)")
```
> Q9. For the first principal component, what is the component of the loading vector (i.e. `wisc.pr$rotation[,1]`) for the feature `concave.points_mean`?

```{r}
wisc.pr$rotation["concave.points_mean",1]
```

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
summary(wisc.pr)
```

5 PCs are required to explain 80% of the variance of the data.

## Combining Methods

We can take our PCA results and use them as a basis set for other analysis such as clustering.


### Clustering on PCA results

```{r}
wisc.pr.hclust <- hclust( dist(wisc.pr$x[,1:2]), method="ward.D2")
plot(wisc.pr.hclust)
```

We can "cut" this tree to yield our clusters (groups):

```{r}
pc.grps <- cutree(wisc.pr.hclust, k=2)
table(pc.grps)
```


```{r}
table(diagnosis, pc.grps)
```
```{r}
table(diagnosis)
```
> Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

The `ward.D2` method is good for creating clear groups / clusters that minimize variance compared to other methods like `single`, `complete`, and `average`. Based on the cluster dendrogram above, we can see all individuals from the bottom of the graph being grouped into compact clusters that minimize within-group variance as the graph works its way up, but towards the very top we see two defined groups which better distinguishes the malignant and benign groups.

> Q15. How well does the newly created model with four clusters separate out the two diagnoses?

```{r}
pc.grps.4 <- cutree(wisc.pr.hclust, k = 4)
table(pc.grps.4)
table(pc.grps.4, diagnosis)
```

The new model with four clusters better separates the two diagnoses but it is less distinct in some clusters. We see a pure malignant cluster in cluster 1 and a mostly benign cluster in cluster 3. However, there is still some mixing of both in clusters 2 and 4 which indicates that the data may be over-split or have some variability. Compared to the 2-cluster model, there is less clearer overall separation of diagnosis groups.

> Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

```{r}
wisc.km <- kmeans(wisc.data, centers= 2, nstart= 20)
wisc.hclust.clusters <- cutree(hc, k=4)
table(wisc.km$cluster, diagnosis)
table(wisc.hclust.clusters, diagnosis)
```


k-means and hierarchical clustering models did really badly in terms of separating the diagnoses. Most patients with the same diagnosis were grouped together but there are still some misclassifications when visualized. We do much better after PCA - the new PCA variables (what we call a basis set) gives us much better separation of M and B. 

## Prediction

We can use our PCA model for the analysis of new "unseen" data. In this case from U. Mich.

```{r}
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc

```
```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> Q18. Which of these new patients should we prioritize for follow up based on your results?

Based on the results, we should prioritize patient 2 because they fall witin the cluster of malignant cases.



