---
title: "Class10: Structural Bioinformatics (pt1)"
author: "Marielle Samonte (A16861951)"
format: typst-pdf
toc: TRUE
---

## 1. The PDB Database

The main repository of biomolecular structure data is called the [Protein Data Bank](http://www.rcsb.org/) (PDB for short). It is the second oldest database (after GenBank).

What is currently in the PDB? We can access current composition stats [here](https://www.rcsb.org/stats/summary)

```{r}
stats <- read.csv("Data Export Summary.csv", row.names = 1)
head(stats)
```


> Q1: What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy.

```{r}
stats$X.ray
as.numeric(stats$X.ray)
# Issue with commas in the numbers
```
```{r}
x <- stats$X.ray

# Substitute comma for nothing
y <- gsub(",", "", x)

# convert to numeric
sum( as.numeric( y ) )
```
Turn this snippet into a function so I can use it any time I have this comma problem (i.e. the other columns of this `stats` table)

```{r}
comma.sum <- function(x) {
  # Substitute comma for nothing
  y <- gsub(",", "", x)
  
  # convert to numeric
  return ( sum( as.numeric( y ) ) )
}
```

```{r}
xray.sum <- comma.sum(stats$X.ray)
em.sum <- comma.sum(stats$EM)
total.sum <- comma.sum(stats$Total)
```

```{r}
xray.sum / total.sum * 100
```
```{r}
em.sum / total.sum * 100
```

> Q2: What proportion of structures in the PDB are protein?

```{r}
protein.rows <- stats[ c("Protein (only)", "Protein/Oligosaccharide", "Protein/NA"),]
protein.sum <- comma.sum(protein.rows$Total)
total.sum <- comma.sum(stats$Total)
protein.sum / total.sum
```


> Q3: Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?

SKIPPED

## 2. Visualizing with Mol-star

Explore the HIV-1 protease structure with PDB code: `1HSG`
Mol-star homepage at: https://molstar.org/viewer/.

> Q4: Water molecules normally have 3 atoms. Why do we see just one atom per water molecule in this structure?

Water is commonly represented as a single oxygen atom and hydrogens are omitted for clarity, especially in crowded visualizations.

> Q5: There is a critical “conserved” water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have

HOH 308

> Q6: Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain and the critical water (we recommend “Ball & Stick” for these side-chains). Add this figure to your Quarto document.

![Figure 1. A first view of HIV-Pr](1HSG.png)
![Figure 2. Molecular surfacing showing binding cavity](1HSG Figure2.png)
![Figure3. The catatailically important ASP 25 amino acids and drug interacting HOH 308 water molecule](1HSG Figure3.png)

## 3. Using the Bio3D package in R

The Bio3D package is focused on structural bioinformatics analysis and allow us to read and analyze PDB (and related) data.


```{r}
library(bio3d)
```

```{r}
pdb <- read.pdb("1hsg")
pdb
```

> Q7: How many amino acid residues are there in this pdb object? 

198 amino acid residues are in this protein.

> Q8: Name one of the two non-protein residues? 

One of th two non-protein residues is HOH, water.

> Q9: How many protein chains are in this structure?

2 protein chains are in this structure.


```{r}
attributes(pdb)
```
We can see ata data with `pdb$atom`:
```{r}
head( pdb$atom )
```
```{r}
head( pdbseq(pdb) )
```

### Molecular Visualization in R

We can make quick 3D viz with the `view.pdb()` function:

```{r}
library(bio3dview)
library(NGLVieweR)

#view.pdb(pdb, backgroundColor = "pink", colorScheme = "sse")
```

```{r}
sel <- atom.select(pdb, resno = 25)

#view.pdb(pdb, cols = c("green", "orange"),
#           highlight = sel,
#         highlight.style = "spacefill") |>
#  setRock()
```

### Predicting functional motions of a single structure

We can finish off today with a bioinformatics prediction of the functional motions of a protein. 

We will run a Normal Mode Analysis (NMA)
```{r}
adk <- read.pdb("6s36")
adk
```

```{r}
m <- nma(adk)
plot(m)
```

```{r}
#view.nma(m)
```

We can write out a trajectory of the predicted dynamics and view this in Mol-star

```{r}
mktrj(m, file="nma.pdb")
```



